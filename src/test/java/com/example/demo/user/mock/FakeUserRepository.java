package com.example.demo.user.mock;

import com.example.demo.user.domain.User;
import com.example.demo.user.domain.UserStatus;
import com.example.demo.user.service.port.UserRepository;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final Map<Long, User> users = new HashMap();

    @Override
    public Optional<User> findByIdAndStatus(long id, UserStatus userStatus) {
        // TODO
        
        return Optional.empty();
    }

    @Override
    public Optional<User> findByEmailAndStatus(String email, UserStatus userStatus) {
        // TODO

        return Optional.empty();
    }

    @Override
    public Optional<User> findById(long id) {
        return Optional.of(users.get(id));
    }

    @Override
    public User save(User user) {
        final var key = user.getId();

        if (users.containsKey(key)) {
            users.remove(key);
            users.put(key, user);
            return user;
        }

        final var generatedId = autoGeneratedId.incrementAndGet();
        final var newUser = User.builder()
                .id(generatedId)
                .email(user.getEmail())
                .nickname(user.getNickname())
                .address(user.getAddress())
                .certificationCode(user.getCertificationCode())
                .status(user.getStatus())
                .lastLoginAt(user.getLastLoginAt())
                .build();

        users.put(generatedId, newUser);

        return newUser;
    }
}
